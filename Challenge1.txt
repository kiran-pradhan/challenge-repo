Challenge 1:
------------
Pre-requisite:
++Azure subscription
++Terraform installed in Azure Cloud shell.
STEP 1:
Compose the following script and save it in file named Provider.tf
terraform {  
  required_providers {  
    azurerm = {  
      source = "hashicorp/azurerm"  
    }  
  }  
}  
provider "azurerm" {  
  features {}  
}
STEP 2:
Configure the “azurerm” Provider in order to establish Communication with Terraform.
Provider azurerm{
Features{}
Subscription_id = “**************”
Tenant_id = “……………”
Client_id = “#########”
Client secret= “&&&&&&”
We will script and save the file in another file named main.tf 
STEP 3:
Create a Resource Group.
resource "azurerm_resource_group" "challenge1_rg" {  
  name = " challenge1_rg "  
  location = "eastus"
STEP 4:
Create a Virtual network in the same location as Resource Group.
resource "azurerm_virtual_network" "myvnet" {
  name                = "myvnet"
  address_space       = ["10.0.0.0/16"]
  location            = azurerm_resource_group..location
  resource_group_name = azurerm_resource_group. challenge1_rg.name
}
STEP 5:
Create two subnets inside the virtual network:
resource "azurerm_subnet" "mysubnet1" {
  name                 = "mysubne1t"
  resource_group_name  = azurerm_resource_group. challenge1_rg.name
  virtual_network_name = azurerm_virtual_network.myvnet.name
  address_prefixes     = ["10.0.1.0/24"]
}
resource "azurerm_subnet" "mysubnet2" {
  name                 = "mysubnet2"
  resource_group_name  = azurerm_resource_group. challenge1_rg.name
  virtual_network_name = azurerm_virtual_network.myvnet.name
  address_prefixes     = ["10.0.2.0/24"]
}
Step 6:
Create the Network security Group and add inbound and Outbound rules in order to filter the traffic:
resource "azurerm_network_security_group" "mynsg" {
  name                = "mynsg"
  location            = azurerm_resource_group. challenge1_rg.location
  resource_group_name = azurerm_resource_group. challenge1_rg.name

  security_rule {
    name                       = “Allow_RDP”
    priority                   = 101
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "RDP"
    source_port_range          = "Any"
    destination_port_range     = "3389"
    source_address_prefix      = "*"
    destination_address_prefix = "*"
  }
}
resource "azurerm_subnet_network_security_group_association" "mynsg_association" {  #Associate the NSG with subnets#
  subnet1_id                 = azurerm_subnet.mysubnet1.id
  subnet2_id                 = azurerm_subnet.mysubnet2.id
network_security_group_id = azurerm_network_security_group.mynsg.id
}
STEP 7:
Enable the Public IP and make it as Static.
resource "azurerm_public_ip" "mypublicip" {
  name                = "myPublicIP"
  location            = azurerm_resource_group. challenge1_rg.location
  resource_group_name = azurerm_resource_group. challenge1_rg.name
  allocation_method   = "Static"
STEP 8:
Create and configure the NIC:
resource "azurerm_network_interface" "mynic" {
  name                = "mynic"
  location            = azurerm_resource_group. challenge1_rg.location
  resource_group_name = azurerm_resource_group. challenge1_rg.name

  ip_configuration {
    name                          = "myip"
    subnet_id                     = azurerm_subnet.mysubnet1.id
    private_ip_address_allocation = "Dynamic"
  }
}
STEP 9:
resource "azurerm_windows_virtual_machine" "challenge1_vm" {
  name                = " challenge1_vm "
  resource_group_name = azurerm_resource_group. . challenge1_rg.name
  location            = azurerm_resource_group. . challenge1_rg.location
  size                = "Standard D2sV4"
  admin_username      = "kiranPradhan"
  admin_password      = "********”
  network_interface_ids = [
    azurerm_network_interface.mynic.id,
  ]

  os_disk {
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
  }

  source_image_reference {
    publisher = "MicrosoftWindowsServer"
    offer     = "WindowsServer"
    sku       = "2019-Datacenter"
    version   = "latest"
  }
}
Post composing the script we will execute the Terraform INIT Command in Provider.tf which will pulls the hashicorp/azurerm module and download it in Local directory.
Finally we will execute the Terraform Plan and Terraform Apply Command in order to frame the whole Infrastaructure.
